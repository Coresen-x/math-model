clear;clc
%% 1.判断是否需要正向化
% A=[9,10,175,120;8,7,164,80;6,3,157,90]
X=input('指标矩阵A=');     %输入判断矩阵
[n,m] = size(X);
disp(['共有' num2str(n) '个评价对象，' num2str(m) '个评价指标'])
Judge = input(['这' num2str(m) '个指标是否需要经过正向化处理，需要请输入1 ，不需要输入0：  ']);

if Judge == 1
    Position = input('请输入需要正向化处理的指标所在的列，例如第2、3、6三列需要处理，那么你需要输入[2,3,6]：  '); %[2,3,4]
    disp('请输入需要处理的这些列的指标类型（1：极小型， 2：中间型， 3：区间型） ')
    Type = input('例如：第2列是极小型，第3列是区间型，第6列是中间型，就输入[1,3,2] ：  '); %[1,2,3]
    % 注意，Position和Type是两个同维度的行向量
    for i = 1 : size(Position,2)  %这里需要对这些列分别处理，因此我们需要知道一共要处理的次数，即循环的次数
        X(:,Position(i)) = Positivization(X(:,Position(i)),Type(i),Position(i));
    end
    % Positivization是我们自己定义的函数，其作用是进行正向化， 其一共接收三个参数
    % 第一个参数是要正向化处理的那一列向量 X(:,Position(i))  回顾上一讲的知识，X(:,n)表示取第n列的全部元素
    % 第二个参数是对应的这一列的指标类型（1：极小型， 2：中间型， 3：区间型）
    % 第三个参数是告诉函数我们正在处理的是原始矩阵中的哪一列 
    % 该函数有一个返回值，它返回正向化之后的指标，我们可以将其直接赋值给我们原始要处理的那一列向量
disp('正向化后的矩阵 X = ')
disp(X)
end

%% 2.对正向化后的矩阵进行标准化
Z = X ./ repmat(sum(X.*X) .^ 0.5, n, 1);  % 标准化公式，计算标准化矩阵Z
disp('标准化矩阵 Z = ')
disp(Z)  % 展示标准化后的矩阵Z

%% 3.计算与最大值的距离和最小值的距离，并算得分
D_P = sum([(Z - repmat(max(Z),n,1)) .^ 2 ],2) .^ 0.5;  % D+ 与最大值的距离向量，通过计算标准化矩阵Z与正理想解（各列最大值）的欧氏距离得到
D_N = sum([(Z - repmat(min(Z),n,1)) .^ 2 ],2) .^ 0.5;  % D- 与最小值的距离向量，通过计算标准化矩阵Z与负理想解（各列最小值）的欧氏距离得到
S = D_N ./ (D_P+D_N);  % 未归一化的得分，依据相对贴近度公式，越接近1代表评价对象越优 
disp('最后的得分为：')
disp(S)
stand_S = 100*S / sum(S);  % 将得分归一化，转化为百分比形式，使总和为100 
[sorted_S,index] = sort(stand_S ,'descend')  % 对归一化后的得分进行降序排序，sorted_S为排序后的得分向量，index为原数据对应的索引 

% sort(A)若A是向量不管是列还是行向量，默认都是对A进行升序排列。sort(A)是默认的升序，而sort(A,'descend')是降序排序。
% sort(A)若A是矩阵，默认对A的各列进行升序排列
% sort(A,dim)
% dim=1时等效sort(A)
% dim=2时表示对A中的各行元素升序排列
% A = [2,1,3,8]
% Matlab中给一维向量排序是使用sort函数：sort（A），排序是按升序进行的，其中A为待排序的向量；
% 若欲保留排列前的索引，则可用[sa,index] = sort(A,'descend')，排序后，sa是排序好的向量，index是向量sa中对A的索引。
% sa = 8    3    2    1 
% index = 4    3    1    2 